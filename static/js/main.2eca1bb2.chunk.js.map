{"version":3,"sources":["actions/index.js","constants/actionTypes.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditting.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["editTask","task","type","TaskForm","props","onChange","event","target","name","value","setState","onClear","id","status","onCancel","onSubmit","preventDefault","onSaveTask","state","onCloseForm","this","taskEditting","nextProp","isDisplayForm","className","onClick","Component","connect","dispatch","actions","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","by","sort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","Control","TaskItem","onUpdateStatus","onDelete","onUpdate","onOpenForm","onEditTask","index","onToggleForm","TaskList","checked","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","search","toLowerCase","indexOf","a","b","elmTasks","map","key","App","onClearTask","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","initialState","s4","Math","floor","random","toString","substring","randomID","findIndex","result","forEach","myReducer","action","console","log","push","setItem","stringify","cloneTasks","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2eca1bb2.chunk.js","sourcesContent":["import * as types from './../constants/actionTypes'\r\nexport const list_All=()=>{\r\n    return {\r\n        type : types.LIST_ALL\r\n    }\r\n}\r\nexport const onSaveTask=(task)=>{\r\n    return {\r\n        type : types.SAVE_TASK,\r\n        task\r\n    }\r\n}\r\nexport const toggleForm=()=>{\r\n    return {\r\n        type : types.TOGGLE_FORM,\r\n    }\r\n}\r\nexport const openForm=()=>{\r\n    return {\r\n        type : types.OPEN_FORM,\r\n\r\n    }\r\n}\r\nexport const closeForm=()=>{\r\n    return {\r\n        type : types.CLOSE_FORM,\r\n\r\n    }\r\n}\r\nexport const updateStatus=(id)=>{\r\n    return {\r\n        type : types.UPDATE_STATUS_TASK,\r\n        id\r\n    }\r\n}\r\nexport const deleteTask=(id)=>{\r\n    return{\r\n        type:types.DELETE_TASK,\r\n        id\r\n    }\r\n}\r\nexport const editTask=(task)=>{\r\n    return{\r\n        type:types.EDIT_TASK,\r\n        task,\r\n    }\r\n}\r\nexport const filterTask=(filter)=>{\r\n    return{\r\n        type:types.FILTER_TABLE,\r\n        filter\r\n    }\r\n}\r\nexport const searchTask=(keyword)=>{\r\n    return {\r\n        type:types.SEARCH,\r\n        keyword\r\n    }\r\n}\r\nexport const sortTask=(sort)=>{\r\n    return {\r\n        type:types.SORT,\r\n        sort\r\n    }\r\n}","export const LIST_ALL = 'LIST_ALL'\r\nexport const SAVE_TASK = 'SAVE_TASK'\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM'\r\nexport const CLOSE_FORM = 'CLOSE_FORM'\r\nexport const OPEN_FORM = 'OPEN_FORM'\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK'\r\nexport const DELETE_TASK = 'DELETE_TASK'\r\nexport const EDIT_TASK ='EDIT_TASK';\r\nexport const FILTER_TABLE='FILTER_TABLE';\r\nexport const SEARCH='SEARCH';\r\nexport const SORT='SORT'","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport * as actions from './../actions/index'\r\nclass TaskForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id:'',\r\n            name :'',\r\n            status : false,\r\n        }\r\n    }\r\n    onChange =(event)=>{\r\n        var target = event.target;\r\n        var name= target.name;\r\n        var value= target.value;\r\n        if(name==='status'){\r\n            value=target.value==='true'?true:false;\r\n        }\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    onClear=()=>{\r\n        this.setState({\r\n            id:'',\r\n            name:'',\r\n            status : false\r\n        })\r\n    }\r\n    onCancel=()=>{\r\n        this.setState({\r\n            name:'',\r\n            status: false\r\n        })\r\n    }\r\n    onSubmit= (event)=>{\r\n        event.preventDefault();\r\n        this.onClear();\r\n        this.props.onSaveTask(this.state);\r\n        this.props.onCloseForm();\r\n    }\r\n    onCloseForm=()=>{\r\n        this.props.onCloseForm();\r\n        this.onClear(); \r\n    }\r\n    UNSAFE_componentWillMount(){\r\n        if(this.props.task){\r\n            this.setState({\r\n                name: this.props.taskEditting.name,\r\n                id: this.props.taskEditting.id,\r\n                status: this.props.taskEditting.status,\r\n            })\r\n        }\r\n        else {\r\n            this.onClear();\r\n        }\r\n    }\r\n    UNSAFE_componentWillReceiveProps(nextProp){\r\n        if(nextProp && nextProp.taskEditting.id!=='' && nextProp.isDisplayForm){\r\n            this.setState({\r\n                name: nextProp.taskEditting.name,\r\n                id: nextProp.taskEditting.id,\r\n                status: nextProp.taskEditting.status,\r\n            })\r\n        }\r\n        else{\r\n            this.onClear();\r\n        }\r\n    }\r\n    render() {\r\n        var {id}=this.state;\r\n        if(!this.props.isDisplayForm){\r\n            return '';\r\n        }\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">\r\n                        {id !==''?'Cập Nhật Công Việc':'Thêm Công Việc'}\r\n                        <span className=\"fa fa-times-circle text-right\"\r\n                            onClick={this.onCloseForm}\r\n                        ></span>\r\n                    </h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input type=\"text\" \r\n                                className=\"form-control\" \r\n                                name=\"name\" \r\n                                value= {this.state.name}\r\n                                onChange = {this.onChange}\r\n                            />\r\n                            <label>Trạng Thái :</label>\r\n\r\n                            <select name=\"status\" className=\"form-control\"\r\n                                onChange = {this.onChange}\r\n                                value = {this.state.status}>\r\n                                <option value={false}>Ẩn</option>\r\n                                <option value={true}>Kick Hoạt</option>\r\n                            </select>\r\n                            <br />\r\n                            <div className=\"text-center\">\r\n                                <button type=\"submit\" className=\"btn btn-warning\">\r\n                                    <span className=\"fa fa-plus mr-5\"></span>\r\n                                    Lưu Lại\r\n                                </button>&nbsp;\r\n                                <button type=\"button\" className=\"btn btn-danger\"\r\n                                    onClick={this.onCancel}\r\n                                >\r\n                                    <span className=\"fa fa-close mr-5\"></span>\r\n                                    Hủy Bỏ\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        isDisplayForm:state.isDisplayForm,\r\n        taskEditting:state.taskEditting,\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return {\r\n        onSaveTask:(task)=>{\r\n            dispatch(actions.onSaveTask(task))\r\n        },\r\n        onCloseForm:()=>{\r\n            dispatch(actions.closeForm())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskForm);","import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux'\r\nclass Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            keyword:''\r\n        }\r\n    }\r\n    onChange=(event)=>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n    onSearch=()=>{\r\n        this.props.onSearch(this.state.keyword)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"input-group\">\r\n                    <input type=\"text\" name=\"keyword\" className=\"form-control\" placeholder=\"Nhập Từ khóa\" \r\n                        value={this.state.keyword}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button type=\"button\" className=\"btn btn-primary\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return {\r\n        onSearch:(keyword)=>{\r\n            dispatch(actions.searchTask(keyword))\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);","import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux'\r\nclass Sort extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            sort:{\r\n                by:'name',\r\n                value:1,\r\n            }\r\n        }\r\n    }\r\n    onClick=(sortBy,sortValue)=>{\r\n        this.props.onSort({\r\n            by:sortBy,\r\n            value:sortValue\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" id=\"dropdownMenu1\"\r\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">Sắp Xếp <span\r\n                            className=\"fa fa-caret-square-o-down ml-15\">\r\n                        </span></button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={()=>this.onClick('name',1)}>\r\n                            <a href='/#' className=\"sort-selected\" >\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\"></span>Tên A-Z\r\n                                </a>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('name',-1)}>\r\n                            <a href='/#' role=\"button\" className=\"sort-selected\" >\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\"></span>Tên Z-A\r\n                                </a>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\" ></li>\r\n                        <li onClick={()=>this.onClick('status',1)}>\r\n                            <a href='/#' role=\"button\" >\r\n                                Trạng Thái Kích Hoạt\r\n                            </a>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('status',-1)}>\r\n                            <a href='/#' role=\"button\" >\r\n                                Trạng Thái Ẩn\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return {\r\n        onSort:(sort)=>{\r\n            dispatch(actions.sortTask(sort))\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Sort);","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nclass Control extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <Search/>\r\n                <Sort/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Control;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index'\r\nclass TaskItem extends Component {\r\n    onUpdateStatus=()=>{\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n    onDelete=()=>{\r\n        this.props.onDelete(this.props.task.id)\r\n    }\r\n    onUpdate=()=>{\r\n        this.props.onOpenForm();\r\n        this.props.onEditTask(this.props.task);\r\n    }\r\nrender() {\r\n    let {task,index} = this.props;\r\nreturn (\r\n        <tr>\r\n            <td>{index+1}</td>\r\n            <td>{task.name}</td>\r\n            <td className=\"text-center\">\r\n                <span className={task.status===true?\"label label-danger\":\"label label-success\"}\r\n                    onClick={this.onUpdateStatus}\r\n                >{task.status===true?'Kích Hoạt':'Ẩn'}</span>\r\n            </td>\r\n            <td className=\"text-center\">\r\n                <button className=\"btn btn-warning\" type=\"button\"\r\n                    onClick={this.onUpdate}\r\n                >\r\n                    <span className=\"fa fa-pencil mr-5\"\r\n                    >Sửa</span>\r\n                </button>&nbsp;\r\n\r\n                <button type=\"button\" className=\"btn btn-danger\"\r\n                onClick={this.onDelete}>\r\n                    <span className=\"fa fa-trash mr-5\" >Xóa</span>\r\n                </button>\r\n\r\n            </td>\r\n        </tr>\r\n);\r\n}\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    return {}\r\n}\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return{\r\n        onUpdateStatus:(id)=>{\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDelete:(id)=>{\r\n            dispatch(actions.deleteTask(id));\r\n        },\r\n        onToggleForm:()=>{\r\n            dispatch(actions.toggleForm())\r\n        },\r\n        onOpenForm:()=>{\r\n            dispatch(actions.openForm())\r\n        },\r\n        onEditTask:(task)=>{\r\n            dispatch(actions.editTask(task))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem'\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux'\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            filterName : '',\r\n            filterStatus : -1\r\n        }\r\n    }\r\n    onChange=(event)=>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type==='checkbox'? target.checked: target.value;\r\n        var filter={\r\n            name:name==='filterName'?value:this.state.filterName,\r\n            status:name==='filterStatus'?value:this.state.filterStatus\r\n        }\r\n        this.props.onFilterTable(filter);\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\nrender() {\r\n    var {tasks,filterTable,search,sort }= this.props;\r\n    var {filterName,filterStatus    } = this.state;\r\n    tasks=tasks.filter((task)=>{\r\n        return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\r\n    });\r\n    tasks=tasks.filter((task)=>{\r\n        if(filterTable.status===-1)\r\n            return task;\r\n        else\r\n            return task.status=== ( filterTable.status=== 1 ?true:false)\r\n    })\r\n    tasks=tasks.filter((task)=>{\r\n        return task.name.toLowerCase().indexOf(search.toLowerCase()) !== -1\r\n    });\r\n    \r\n    if(sort.by==='name'){\r\n        tasks.sort((a,b)=>{\r\n            if(a.name.toLowerCase()>b.name.toLowerCase()) return sort.value;\r\n            else if(a.name.toLowerCase()<b.name.toLowerCase()) return -sort.value\r\n            else return 0;\r\n        })\r\n    }else {\r\n        tasks.sort((a,b)=>{\r\n            if(a.status >b.status) return -sort.value;\r\n            else if(a.status <b.status) return sort.value;\r\n            else return 0;\r\n        })\r\n    }\r\n    var elmTasks = tasks.map((task,index)=>{\r\n        return <TaskItem \r\n        key = {task.id} \r\n        index = {index} \r\n        task = {task}\r\n        />\r\n    })\r\nreturn (\r\n        <table className=\"table table-bordered table-hover mt-15\">\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"text-center\">STT</th>\r\n                    <th className=\"text-center\">Tên</th>\r\n                    <th className=\"text-center\">Trạng Thái</th>\r\n                    <th className=\"text-center\">Hoạt Động</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>\r\n                        <input type=\"text\" name=\"filterName\" className=\"form-control\" \r\n                            onChange={this.onChange}\r\n                            value={filterName}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <select name=\"filterStatus\" className=\"form-control\"\r\n                            onChange={this.onChange}\r\n                            value={filterStatus}>\r\n                            <option value={-1}>Tất Cả</option>\r\n                            <option value={0}>Ẩn</option>\r\n                            <option value={1}>Kích Hoạt</option>\r\n                        </select>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                {elmTasks}\r\n            </tbody>\r\n        </table>\r\n\r\n);\r\n}\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    return { \r\n        tasks : state.tasks,\r\n        filterTable:state.filterTable,\r\n        search : state.search,\r\n        sort:state.sort\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return {\r\n        onFilterTable:(filter)=>{\r\n            dispatch(actions.filterTask(filter))\r\n        }      \r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm'\nimport Control from './components/Control'\nimport TashList from './components/TaskList'\n// import {findIndex} from 'lodash'\nimport {connect} from 'react-redux'\nimport * as actions from './actions/index'\nclass App extends Component {\n    onToggleForm = () => {\n        var {taskEditting}=this.props;\n        if(taskEditting.id!==''){\n        \n        }\n        else{\n            this.props.onToggleForm();\n        }\n        this.props.onClearTask({\n            id:'',\n            name:'',\n            status:false\n        })\n    }\nrender() {\n        let isDisplayForm = this.props.isDisplayForm\nreturn (\n<div className=\"container\">\n    <div className=\"textcenter\">\n        <h1>Quản Lí Công Việc</h1>\n        <hr />\n    </div>\n    <div className=\"row\">\n        <div className={isDisplayForm?\"col-xs-4 col-sm-4 col-md-4 col-lg-4\":\"col-xs-0 col-sm-0 col-md-0 col-lg-0\"}>\n            {/*Form*/}\n            <TaskForm \n        onSubmit={this.onSubmit}\n            /> \n        </div>\n\n        <div className={isDisplayForm?\"col-xs-8 col-sm-8 col-md-8 col-lg-8\":\"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n            <button type=\"button\" className=\"btn btn-primary\"\n                onClick= {this.onToggleForm}>\n                <span className=\"fa fa-plus mr-5\"></span> Thêm Công Việc\n            </button>\n            {/*search and sort*/}\n            <Control \n            />\n            <div className=\"row mt-15\">\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <TashList />\n                </div>\n\n            </div>\n\n        </div>\n    </div>\n</div>\n\n);\n}\n}\nconst mapStateToProps=(state)=>{\n    return {\n        isDisplayForm:state.isDisplayForm,\n        taskEditting:state.taskEditting\n    }\n}\nconst mapDispatchToProps=(dispatch,props)=>{\n    return{\n        onToggleForm:()=>{\n            dispatch(actions.toggleForm())\n        },\n        onClearTask:(task)=>{\n            dispatch(actions.editTask(task))\n        }\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from './../constants/actionTypes'\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\nvar initialState = data?data:[];\r\nvar s4=()=>{\r\n    return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);\r\n}\r\nvar randomID=()=>{\r\n    return s4()+ s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4()+s4();\r\n}\r\nvar findIndex=(tasks,id)=>{\r\n    var result =-1;\r\n    tasks.forEach((task,index)=>{\r\n        if(task.id===id){\r\n            result=index;\r\n        }\r\n    })\r\n    return result;\r\n}\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            console.log(action)\r\n            var task={\r\n                id:action.task.id,\r\n                name:action.task.name,\r\n                status:action.task.status}\r\n            if(!task.id){\r\n                task.id=randomID()\r\n                var index=state.push(task);\r\n            }\r\n            else{\r\n                index=findIndex(state,task.id);\r\n                state[index]=task;\r\n            }\r\n            localStorage.setItem('tasks',JSON.stringify(state))\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            var id =action.id;\r\n            index = findIndex(state,id);\r\n            // state[index].status=!state[index].status\r\n            // var cloneTask= {...state[index]};\r\n            // cloneTask.status=!cloneTask.status;\r\n            // state[index]=cloneTask;\r\n            state[index]={\r\n                ...state[index],\r\n                status:!state[index].status\r\n            }\r\n            localStorage.setItem('tasks',JSON.stringify(state))\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            id =action.id;\r\n            index = findIndex(state,id);\r\n            var cloneTasks=[...state];\r\n            cloneTasks.splice(index,1);\r\n            state=cloneTasks\r\n            localStorage.setItem('tasks',JSON.stringify(state))\r\n            return [...state];\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer","import * as types from './../constants/actionTypes'\r\nvar initialState=false;\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.OPEN_FORM:\r\n            return true\r\n        case types.CLOSE_FORM:\r\n            return false\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer","import * as types from './../constants/actionTypes'\r\nvar initialState={\r\n    id:'',\r\n    name:'',\r\n    status:false\r\n};\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.EDIT_TASK:\r\n            return action.task;\r\n        default:\r\n            return initialState;\r\n    }\r\n}\r\nexport default myReducer","import * as types from './../constants/actionTypes'\r\nvar initialState={\r\n    name:'',\r\n    status:-1\r\n};\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.FILTER_TABLE:\r\n            return {\r\n                name:action.filter.name,\r\n                status: parseInt(action.filter.status,10)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer","import * as types from './../constants/actionTypes'\r\nvar initialState='';\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.SEARCH:\r\n            return action.keyword\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer","import * as types from './../constants/actionTypes'\r\nvar initialState={\r\n    by:'',\r\n    value: 1,\r\n};\r\nvar myReducer = (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case types.SORT:\r\n            return {\r\n               by:action.sort.by,\r\n               value:action.sort.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default myReducer","import {combineReducers} from 'redux';\r\nimport tasks from './tasks'\r\nimport isDisplayForm from './isDisplayForm'\r\nimport taskEditting from './taskEditting'\r\nimport filterTable from './filterTable'\r\nimport search from './search'\r\nimport sort from './sort'\r\nconst myReducer = combineReducers ({\r\n    tasks,  //tasks:tasks\r\n    isDisplayForm,\r\n    taskEditting,\r\n    filterTable,\r\n    search,\r\n    sort\r\n});\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport myReducer from './reducers/index';\nimport {Provider} from 'react-redux'\n\nconst store = createStore(\n  myReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App /> \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}